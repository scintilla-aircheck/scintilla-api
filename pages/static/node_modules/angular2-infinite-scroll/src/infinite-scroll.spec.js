"use strict";
var infinite_scroll_1 = require('./infinite-scroll');
var axis_resolver_1 = require('./axis-resolver');
var core_1 = require('@angular/core');
describe('Infinite Scroll Directive', function () {
    var zone = new core_1.NgZone({ enableLongStackTrace: false });
    var createMockElement = function () {
        var mockedElement = new core_1.ElementRef(document.createElement('div'));
        return mockedElement;
    };
    var createInfiniteScroll = function () {
        var mockedElement = createMockElement();
        var axis = new axis_resolver_1.AxisResolver();
        return new infinite_scroll_1.InfiniteScroll(mockedElement, zone, axis);
    };
    beforeEach(function () {
        spyOn(axis_resolver_1.AxisResolver, 'constructor').and.callFake(function () { });
    });
    it('should create an instance of the directive', function () {
        var actual = createInfiniteScroll();
        expect(actual).toBeDefined();
    });
    it('should have default @Input properties values', function () {
        var directive = createInfiniteScroll();
        var expectedInputs = {
            _distanceDown: 2,
            _distanceUp: 1.5,
            _throttle: 300,
            scrollWindow: true,
            _immediate: false,
            _horizontal: false,
            _alwaysCallback: false,
            _disabled: false
        };
        Object.keys(expectedInputs).forEach(function (input) {
            return expect(directive[input]).toEqual(expectedInputs[input]);
        });
    });
    it('should trigger the onScrollDown event when scroll has passed _distandDown', function () {
        var directive = createInfiniteScroll();
        spyOn(directive, 'onScrollDown');
        directive.ngOnInit();
        spyOn(directive.scroller, 'calculatePoints').and.callFake(function () {
            return { height: 150, scrolledUntilNow: 75, totalToScroll: 150 };
        });
        directive.scroller.handler();
        expect(directive.scroller.calculatePoints).toHaveBeenCalled();
        expect(directive.onScrollDown).toHaveBeenCalled();
    });
    it('should trigger the onScrollUp event when scroll has passed _distanceUp', function () {
        var directive = createInfiniteScroll();
        spyOn(directive, 'onScrollUp');
        directive.ngOnInit();
        spyOn(directive.scroller, 'calculatePoints').and.callFake(function () {
            return { height: 150, scrolledUntilNow: 30, totalToScroll: 150 };
        });
        directive.scroller.lastScrollPosition = 50;
        directive.scroller.handler();
        expect(directive.scroller.calculatePoints).toHaveBeenCalled();
        expect(directive.onScrollUp).toHaveBeenCalled();
    });
    it('should disable the scroller', function () {
        var directive = createInfiniteScroll();
        var changes = {
            '_disabled': new core_1.SimpleChange(false, true)
        };
        // spyOn(directive, 'onScrollUp');
        directive.ngOnInit();
        directive.ngOnChanges(changes);
        var expected = false;
        var actual = directive.scroller.scrollEnabled;
        expect(actual).toBe(expected);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5maW5pdGUtc2Nyb2xsLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmZpbml0ZS1zY3JvbGwuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUEsZ0NBQStCLG1CQUFtQixDQUFDLENBQUE7QUFDbkQsOEJBQTZCLGlCQUFpQixDQUFDLENBQUE7QUFFL0MscUJBQWdFLGVBQWUsQ0FBQyxDQUFBO0FBRWhGLFFBQVEsQ0FBQywyQkFBMkIsRUFBRTtJQUNwQyxJQUFNLElBQUksR0FBRyxJQUFJLGFBQU0sQ0FBQyxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDekQsSUFBTSxpQkFBaUIsR0FBRztRQUN4QixJQUFNLGFBQWEsR0FBZSxJQUFJLGlCQUFVLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLE1BQU0sQ0FBQyxhQUFhLENBQUM7SUFDdkIsQ0FBQyxDQUFDO0lBRUYsSUFBTSxvQkFBb0IsR0FBRztRQUMzQixJQUFNLGFBQWEsR0FBRyxpQkFBaUIsRUFBRSxDQUFDO1FBQzFDLElBQU0sSUFBSSxHQUFpQixJQUFJLDRCQUFZLEVBQUUsQ0FBQztRQUM5QyxNQUFNLENBQUMsSUFBSSxnQ0FBYyxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFDO0lBRUYsVUFBVSxDQUFDO1FBQ1QsS0FBSyxDQUFDLDRCQUFZLEVBQUUsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDRDQUE0QyxFQUFFO1FBQy9DLElBQU0sTUFBTSxHQUFHLG9CQUFvQixFQUFFLENBQUM7UUFDdEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxD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QVEsQ0FBQyxhQUFhLENBQUM7UUFDaEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYXN5bmMsXG4gIGluamVjdFxufSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSW5maW5pdGVTY3JvbGwgfSBmcm9tICcuL2luZmluaXRlLXNjcm9sbCc7XG5pbXBvcnQgeyBBeGlzUmVzb2x2ZXIgfSBmcm9tICcuL2F4aXMtcmVzb2x2ZXInOyBcblxuaW1wb3J0IHsgRWxlbWVudFJlZiwgTmdab25lLCBTaW1wbGVDaGFuZ2VzLCBTaW1wbGVDaGFuZ2UgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZGVzY3JpYmUoJ0luZmluaXRlIFNjcm9sbCBEaXJlY3RpdmUnLCAoKSA9PiB7XG4gIGNvbnN0IHpvbmUgPSBuZXcgTmdab25lKHsgZW5hYmxlTG9uZ1N0YWNrVHJhY2U6IGZhbHNlIH0pO1xuICBjb25zdCBjcmVhdGVNb2NrRWxlbWVudCA9ICgpID0+IHtcbiAgICBjb25zdCBtb2NrZWRFbGVtZW50OiBFbGVtZW50UmVmID0gbmV3IEVsZW1lbnRSZWYoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpO1xuICAgIHJldHVybiBtb2NrZWRFbGVtZW50O1xuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZUluZmluaXRlU2Nyb2xsID0gKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tlZEVsZW1lbnQgPSBjcmVhdGVNb2NrRWxlbWVudCgpO1xuICAgIGNvbnN0IGF4aXM6IEF4aXNSZXNvbHZlciA9IG5ldyBBeGlzUmVzb2x2ZXIoKTtcbiAgICByZXR1cm4gbmV3IEluZmluaXRlU2Nyb2xsKG1vY2tlZEVsZW1lbnQsIHpvbmUsIGF4aXMpO1xuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT57XG4gICAgc3B5T24oQXhpc1Jlc29sdmVyLCAnY29uc3RydWN0b3InKS5hbmQuY2FsbEZha2UoKCkgPT4ge30pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgZGlyZWN0aXZlJywgKCkgPT4ge1xuICAgIGNvbnN0IGFjdHVhbCA9IGNyZWF0ZUluZmluaXRlU2Nyb2xsKCk7XG4gICAgZXhwZWN0KGFjdHVhbCkudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYXZlIGRlZmF1bHQgQElucHV0IHByb3BlcnRpZXMgdmFsdWVzJywgKCkgPT4ge1xuICAgIGNvbnN0IGRpcmVjdGl2ZSA9IGNyZWF0ZUluZmluaXRlU2Nyb2xsKCk7XG4gICAgY29uc3QgZXhwZWN0ZWRJbnB1dHMgPSB7XG4gICAgICBfZGlzdGFuY2VEb3duOiAyLFxuICAgICAgX2Rpc3RhbmNlVXA6IDEuNSxcbiAgICAgIF90aHJvdHRsZTogMzAwLFxuICAgICAgc2Nyb2xsV2luZG93OiB0cnVlLFxuICAgICAgX2ltbWVkaWF0ZTogZmFsc2UsXG4gICAgICBfaG9yaXpvbnRhbDogZmFsc2UsXG4gICAgICBfYWx3YXlzQ2FsbGJhY2s6IGZhbHNlLFxuICAgICAgX2Rpc2FibGVkOiBmYWxzZVxuICAgIH07XG5cbiAgICBPYmplY3Qua2V5cyhleHBlY3RlZElucHV0cykuZm9yRWFjaChpbnB1dCA9PlxuICAgICAgZXhwZWN0KGRpcmVjdGl2ZVtpbnB1dF0pLnRvRXF1YWwoZXhwZWN0ZWRJbnB1dHNbaW5wdXRdKSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdHJpZ2dlciB0aGUgb25TY3JvbGxEb3duIGV2ZW50IHdoZW4gc2Nyb2xsIGhhcyBwYXNzZWQgX2Rpc3RhbmREb3duJywgKCkgPT4ge1xuICAgIGNvbnN0IGRpcmVjdGl2ZSA9IGNyZWF0ZUluZmluaXRlU2Nyb2xsKCk7XG4gICAgc3B5T24oZGlyZWN0aXZlLCAnb25TY3JvbGxEb3duJyk7XG4gICAgZGlyZWN0aXZlLm5nT25Jbml0KCk7XG4gICAgc3B5T24oZGlyZWN0aXZlLnNjcm9sbGVyLCAnY2FsY3VsYXRlUG9pbnRzJykuYW5kLmNhbGxGYWtlKCgpID0+IHtcbiAgICAgIHJldHVybiB7IGhlaWdodDogMTUwLCBzY3JvbGxlZFVudGlsTm93OiA3NSwgdG90YWxUb1Njcm9sbDogMTUwIH07XG4gICAgfSk7XG4gICAgZGlyZWN0aXZlLnNjcm9sbGVyLmhhbmRsZXIoKTtcbiAgICBleHBlY3QoZGlyZWN0aXZlLnNjcm9sbGVyLmNhbGN1bGF0ZVBvaW50cykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGV4cGVjdChkaXJlY3RpdmUub25TY3JvbGxEb3duKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdHJpZ2dlciB0aGUgb25TY3JvbGxVcCBldmVudCB3aGVuIHNjcm9sbCBoYXMgcGFzc2VkIF9kaXN0YW5jZVVwJywgKCkgPT4ge1xuICAgIGNvbnN0IGRpcmVjdGl2ZSA9IGNyZWF0ZUluZmluaXRlU2Nyb2xsKCk7XG4gICAgc3B5T24oZGlyZWN0aXZlLCAnb25TY3JvbGxVcCcpO1xuICAgIGRpcmVjdGl2ZS5uZ09uSW5pdCgpO1xuICAgIHNweU9uKGRpcmVjdGl2ZS5zY3JvbGxlciwgJ2NhbGN1bGF0ZVBvaW50cycpLmFuZC5jYWxsRmFrZSgoKSA9PiB7XG4gICAgICByZXR1cm4geyBoZWlnaHQ6IDE1MCwgc2Nyb2xsZWRVbnRpbE5vdzogMzAsIHRvdGFsVG9TY3JvbGw6IDE1MCB9O1xuICAgIH0pO1xuICAgIGRpcmVjdGl2ZS5zY3JvbGxlci5sYXN0U2Nyb2xsUG9zaXRpb24gPSA1MDtcbiAgICBkaXJlY3RpdmUuc2Nyb2xsZXIuaGFuZGxlcigpO1xuICAgIGV4cGVjdChkaXJlY3RpdmUuc2Nyb2xsZXIuY2FsY3VsYXRlUG9pbnRzKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgZXhwZWN0KGRpcmVjdGl2ZS5vblNjcm9sbFVwKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZGlzYWJsZSB0aGUgc2Nyb2xsZXInLCAoKSA9PiB7XG4gICAgY29uc3QgZGlyZWN0aXZlID0gY3JlYXRlSW5maW5pdGVTY3JvbGwoKTtcbiAgICBjb25zdCBjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzID0ge1xuICAgICAgJ19kaXNhYmxlZCc6IG5ldyBTaW1wbGVDaGFuZ2UoZmFsc2UsIHRydWUpXG4gICAgfTtcbiAgICAvLyBzcHlPbihkaXJlY3RpdmUsICdvblNjcm9sbFVwJyk7XG4gICAgZGlyZWN0aXZlLm5nT25Jbml0KCk7XG4gICAgZGlyZWN0aXZlLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xuICAgIGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG4gICAgY29uc3QgYWN0dWFsID0gZGlyZWN0aXZlLnNjcm9sbGVyLnNjcm9sbEVuYWJsZWQ7XG4gICAgZXhwZWN0KGFjdHVhbCkudG9CZShleHBlY3RlZCk7XG4gIH0pXG59KVxuIl19